//https://leetcode.com/problems/range-sum-of-bst/
/*Runtime: 316 ms, faster than 5.11% of C++ online submissions for Range Sum of BST.
Memory Usage: 431.9 MB, less than 5.45% of C++ online submissions for Range Sum of BST.*/
//-----------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) 
    {
        vector<int> result;
        //inorder traversal of a BST gives the elements in the increasing order. I have retained it inside a vector.
        result = inorder(root,result,L,R);
        int sum=0;
        for(int i=0;i<result.size();i++)
        {
              //I do an iterative traversal of the vector and add the sum if it falls within the range specified in the question.
            if((result[i]>=L)&&(result[i]<=R))
                sum+=result[i];
        }
        return sum;
    }
    vector<int> inorder(TreeNode* root, vector<int> &result,int L, int R)
    {
        if(root->left!=NULL)
            inorder(root->left,result,L,R);
        
        if(((root->val)>=L)&&((root->val)<=R))//I put this condition as Leetcode gave me "memory exceeded" exception
            result.push_back(root->val);
        
        if(root->right!=NULL)
            inorder(root->right,result,L,R);
        
        return result;
    }
};
